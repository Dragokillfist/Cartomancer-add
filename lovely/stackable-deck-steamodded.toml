[manifest]
version = "1.0.0"
dump_lua = true
priority = 69

#
# Steamodded patches.
#

# Overwrite how suits are added

[[patches]] 
[patches.regex]
target = "main.lua"
pattern = '''
(?<indent>[\t ]*)for k, v in ipairs\(G\.playing_cards\) do
[\t ]*table\.insert\(SUITS\[v\.base\.suit\], v\)'''
position = "at"
payload = '''
local SUITS_SORTED = tablecopy(SUITS)
for k, v in ipairs(G.playing_cards) do
  local greyed
  if unplayed_only and not ((v.area and v.area == G.deck) or v.ability.wheel_flipped) then
    greyed = true
  end
  local card_string = v:to_string()
  if greyed then
    card_string = card_string .. "Greyed"
  end
  if not SUITS[v.base.suit][card_string] then
        table.insert(SUITS_SORTED[v.base.suit], card_string)

        local _scale = 0.7
        local copy = copy_card(v, nil, _scale)

        copy.greyed = greyed
        copy.stacked_quantity = 1

        SUITS[v.base.suit][card_string] = copy
  else
    local stacked_card = SUITS[v.base.suit][card_string]
    stacked_card.stacked_quantity = stacked_card.stacked_quantity + 1
  end'''
line_prepend = '$indent'

[[patches]] 
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = '''
if SUITS\[suit_map\[j\]\]\[1\] then
[\t ]*local view_deck = CardArea\('''
position = "at"
payload = '''
if SUITS_SORTED[suit_map[j]][1] then
      local view_deck = CardArea('''
line_prepend = ''

[[patches]] 
[patches.pattern]
target = "main.lua"
pattern = "card_limit = #SUITS[suit_map[j]],"
position = "at"
payload = "card_limit = #SUITS_SORTED[suit_map[j]],"
match_indent = true

# Overwrite cards copy and display code

[[patches]] 
[patches.regex]
target = "main.lua"
pattern = '''
(?<indent>[\t ]*)for i = 1, \#SUITS\[suit_map\[j\]\] do
[\t ]*	if SUITS\[suit_map\[j\]\]\[i\] then
[\t ]*		local greyed, _scale = nil, 0\.7
[\t ]*		if unplayed_only and not \(\(SUITS\[suit_map\[j\]\]\[i\]\.area and SUITS\[suit_map\[j\]\]\[i\]\.area == G\.deck\) or SUITS\[suit_map\[j\]\]\[i\]\.ability\.wheel_flipped\) then
[\t ]*			greyed = true
[\t ]*		end
[\t ]*		local copy = copy_card\(SUITS\[suit_map\[j\]\]\[i\], nil, _scale\)
[\t ]*		copy\.greyed = greyed
[\t ]*		copy\.T\.x = view_deck\.T\.x \+ view_deck\.T\.w \/ 2
[\t ]*		copy\.T\.y = view_deck\.T\.y
[\t ]*
[\t ]*		copy:hard_set_T\(\)
[\t ]*		view_deck:emplace\(copy\)
[\t ]*	end
[\t ]*end'''
position = "at"
payload = '''
for i = 1, #SUITS_SORTED[suit_map[j]] do
  local card_string = SUITS_SORTED[suit_map[j]][i]
  local card = SUITS[suit_map[j]][card_string]

  card.T.x = view_deck.T.x + view_deck.T.w/2
  card.T.y = view_deck.T.y
  card:create_quantity_display()

  card:hard_set_T()
  view_deck:emplace(card)
end
'''
line_prepend = '$indent'
